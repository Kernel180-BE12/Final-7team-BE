name: Backend CI/CD to AWS ECR

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 21 설치
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradle Wrapper 실행 권한 부여
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew
        working-directory: springboot

      # 4. Spotless 코드 스타일 검사
      - name: Run Spotless Check
        run: ./gradlew spotlessCheck
        working-directory: springboot

      # 5. Gradle 빌드 & 테스트
      - name: Run Gradle Build & Test
        run: ./gradlew build
        working-directory: springboot

  build-and-push-backend:
    needs: build-and-test   # CI 성공 시에만 동작
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. AWS 자격 증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 3. ECR 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

#      # 4. 변경된 디렉토리 감지
#      - name: Detect changed directories
#        id: changes
#        run: |
#          echo "springboot=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^springboot/' || true)" >> $GITHUB_ENV
#          echo "fastapi=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^fastapi/' || true)" >> $GITHUB_ENV
#          echo "nginx=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '^nginx/' || true)" >> $GITHUB_ENV

      - name: Detect changed directories
        id: changes
        run: |
          # GitHub Actions에서 제공하는 before SHA 사용
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ] && [ "${{ github.event.before }}" != "" ]; then
            BASE_SHA="${{ github.event.before }}"
          else
            # 첫 push인 경우 빈 트리와 비교
            BASE_SHA="4b825dc642cb6eb9a060e54bf8d69288fbee4904"
          fi
          
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV

          # 변경된 폴더 체크 (더 안전한 방식)
          CHANGED_FILES=$(git diff --name-only "$BASE_SHA" ${{ github.sha }} 2>/dev/null || echo "")
          
          if echo "$CHANGED_FILES" | grep -q '^springboot/'; then
            echo "springboot=changed" >> $GITHUB_ENV
          else
            echo "springboot=" >> $GITHUB_ENV
          fi
          
          if echo "$CHANGED_FILES" | grep -q '^fastapi/'; then
            echo "fastapi=changed" >> $GITHUB_ENV
          else
            echo "fastapi=" >> $GITHUB_ENV
          fi
          
          if echo "$CHANGED_FILES" | grep -q '^nginx/'; then
            echo "nginx=changed" >> $GITHUB_ENV
          else
            echo "nginx=" >> $GITHUB_ENV
          fi
      
      
      

      # 5. SpringBoot 이미지 빌드 & 푸시
      - name: Build & Push SpringBoot
        if: env.springboot != ''
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/final-7team-springboot:latest ./springboot
          docker push ${{ secrets.ECR_REGISTRY }}/final-7team-springboot:latest

      # 6. FastAPI 이미지 빌드 & 푸시
      - name: Build & Push FastAPI
        if: env.fastapi != ''
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/final-7team-fastapi:latest ./fastapi
          docker push ${{ secrets.ECR_REGISTRY }}/final-7team-fastapi:latest

      # 7. Nginx 이미지 빌드 & 푸시
      - name: Build & Push Nginx
        if: env.nginx != ''
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/final-7team-nginx:latest ./nginx
          docker push ${{ secrets.ECR_REGISTRY }}/final-7team-nginx:latest

  deploy-to-ec2:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'   # main 머지 시에만 배포

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/softlabs
            docker-compose pull
            docker-compose up -d
            docker image prune -f
