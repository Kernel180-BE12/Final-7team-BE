# 워크플로우 이름
name: Backend CI/CD to AWS ECR
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - dev
# 모든 작업에서 공통으로 사용할 환경변수 설정
env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  SPRINGBOOT_ECR_REPOSITORY: final-7team-springboot
  FASTAPI_ECR_REPOSITORY: final-7team-fastapi
  NGINX_ECR_REPOSITORY: final-7team-nginx
jobs:
  # 1. CI (빌드 및 테스트)
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: springboot
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      # Gradle 캐싱으로 빌드 속도 향상
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew
      - name: Run Spotless Check
        run: ./gradlew spotlessCheck
      - name: Run Gradle Build & Test
        run: ./gradlew build -x test # 테스트는 별도 단계로 분리 가능
  # 2. CD (도커 이미지 빌드 및 ECR 푸시)
  build-and-push-backend:
    needs: build-and-test # CI 성공 시에만 동작
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    # Matrix 전략으로 중복되는 빌드&푸시 작업을 하나로 통합
    strategy:
      matrix:
        # 서비스 목록 정의
        service_name: [springboot, fastapi, nginx]
        # 서비스별 ECR 리포지토리 이름 매핑
        include:
          - service_name: springboot
            ecr_repo: final-7team-springboot
          - service_name: fastapi
            ecr_repo: final-7team-fastapi
          - service_name: nginx
            ecr_repo: final-7team-nginx
    # matrix의 출력을 다음 job으로 전달하기 위함
    outputs:
      image_tag: ${{ steps.vars.outputs.sha_short }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # git diff를 위해 전체 히스토리 가져오기
        with:
          fetch-depth: 0
      # :latest 대신 사용할 커밋 해시 태그 생성
      - name: Set reusable variables
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      # 안정적인 변경 감지를 위해 검증된 action 사용
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
      # if 조건으로 각 서비스 폴더에 변경이 있을 때만 해당 matrix 실행
      # 예: springboot 폴더에 변경이 있을 때만 springboot 빌드
      - name: Check if service changed
        id: service-changed
        run: |
          if echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep -q "${{ matrix.service_name }}"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Configure AWS credentials
        if: steps.service-changed.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        if: steps.service-changed.outputs.changed == 'true'
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push changed services based on matrix
        if: steps.service-changed.outputs.changed == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service_name }}
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ matrix.ecr_repo }}:${{ steps.vars.outputs.sha_short }}
  # 3. CD (EC2 배포)
  deploy-to-ec2:
    needs: build-and-push-backend
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd ~/softlabs
            # 이전 job에서 생성된 이미지 태그를 환경변수로 설정
            export SPRINGBOOT_IMAGE_TAG=${{ needs.build-and-push-backend.outputs.image_tag }}
            export FASTAPI_IMAGE_TAG=${{ needs.build-and-push-backend.outputs.image_tag }}
            export NGINX_IMAGE_TAG=${{ needs.build-and-push-backend.outputs.image_tag }}
            # docker-compose가 새로운 태그의 이미지를 pull 하도록 실행
            docker-compose pull
            docker-compose up -d --remove-orphans
            # 불필요한 이미지 정리
            docker image prune -f
